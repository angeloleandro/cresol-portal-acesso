const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente obrigat√≥rias n√£o encontradas');
  process.exit(1);
}

// Cliente como seria usado no frontend (com anon key)
const supabaseClient = createClient(supabaseUrl, supabaseAnonKey);

// Cliente admin para prepara√ß√£o
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: { persistSession: false }
});

function log(emoji, message, data = null) {
  console.log(`${emoji} ${message}`);
  if (data) {
    console.log(JSON.stringify(data, null, 2));
  }
}

// Simular login de um usu√°rio admin
async function testClientRLSPolicies() {
  console.log('üîç TESTANDO POL√çTICAS RLS DO LADO DO CLIENTE\n');
  console.log('=' .repeat(60));
  
  try {
    // Passo 1: Buscar um usu√°rio admin existente
    log('üìã', 'Buscando usu√°rio admin para teste...');
    const { data: adminUsers, error: fetchError } = await supabaseAdmin
      .from('profiles')
      .select('id, email, role')
      .eq('role', 'admin')
      .limit(1);
    
    if (fetchError || !adminUsers || adminUsers.length === 0) {
      log('‚ùå', 'Erro: nenhum usu√°rio admin encontrado', fetchError);
      return;
    }
    
    const adminUser = adminUsers[0];
    log('‚úÖ', `Usu√°rio admin encontrado: ${adminUser.email}`);
    
    // Passo 2: Buscar um setor para teste
    const { data: sectors, error: sectorError } = await supabaseAdmin
      .from('sectors')
      .select('id, name')
      .limit(1);
    
    if (sectorError || !sectors || sectors.length === 0) {
      log('‚ùå', 'Erro: nenhum setor encontrado', sectorError);
      return;
    }
    
    const sector = sectors[0];
    log('‚úÖ', `Setor encontrado: ${sector.name} (${sector.id})`);
    
    // Passo 3: Testar fun√ß√£o can_manage_sector_content no contexto admin
    log('üîß', 'Testando fun√ß√£o can_manage_sector_content...');
    
    // Como service role
    const { data: canManageAsService, error: serviceError } = await supabaseAdmin
      .rpc('can_manage_sector_content', { sector_id_param: sector.id });
    
    log('üîß', 'Resultado como SERVICE ROLE:', { 
      result: canManageAsService, 
      error: serviceError?.message 
    });
    
    // Passo 4: Simular contexto de cliente autenticado
    log('üë§', 'Simulando INSERT de not√≠cia como cliente an√¥nimo (deve falhar)...');
    
    // Tentar inserir como cliente an√¥nimo (deve falhar)
    const { data: insertDataAnon, error: insertErrorAnon } = await supabaseClient
      .from('sector_news')
      .insert([{
        sector_id: sector.id,
        title: 'TESTE CLIENTE AN√îNIMO - ' + new Date().toISOString(),
        content: 'Teste de inser√ß√£o como cliente an√¥nimo',
        summary: 'Resumo do teste',
        is_published: false
      }]);
    
    if (insertErrorAnon) {
      log('‚úÖ', 'Falha esperada para cliente an√¥nimo:', insertErrorAnon.message);
    } else {
      log('‚ùå', 'PROBLEMA: Cliente an√¥nimo conseguiu inserir!', insertDataAnon);
    }
    
    // Passo 5: Testar com sess√£o de usu√°rio autenticado (simulado)
    log('üë§', 'Simulando autentica√ß√£o de usu√°rio admin...');
    
    // Nota: Em um ambiente real, voc√™ faria:
    // await supabaseClient.auth.signInWithPassword({ email, password })
    // 
    // Como n√£o temos a senha, vamos simular o que acontece ap√≥s o login
    // testando as pol√≠ticas diretamente via admin client mas usando o contexto
    
    // Verificar se as pol√≠ticas est√£o corretas
    log('üîç', 'Verificando configura√ß√£o das pol√≠ticas...');
    
    const { data: policies, error: policyError } = await supabaseAdmin
      .from('pg_policies')
      .select('tablename, policyname, cmd, qual, with_check')
      .eq('tablename', 'sector_news')
      .eq('cmd', 'INSERT');
    
    if (policyError) {
      log('‚ùå', 'Erro ao buscar pol√≠ticas (tabela pg_policies pode n√£o existir no ambiente)');
    } else {
      log('üìã', 'Pol√≠ticas INSERT para sector_news:', policies);
    }
    
    // Teste espec√≠fico: verificar se auth.uid() funciona no contexto correto
    log('üîç', 'Testando auth.uid() availability...');
    
    const { data: authTest, error: authError } = await supabaseAdmin
      .rpc('test_auth_uid');
    
    if (authError && authError.message.includes('function "test_auth_uid" does not exist')) {
      log('‚ÑπÔ∏è', 'Fun√ß√£o test_auth_uid n√£o existe (normal)');
      
      // Criar fun√ß√£o de teste tempor√°ria
      log('üîß', 'Criando fun√ß√£o de teste tempor√°ria...');
      
      await supabaseAdmin.rpc('sql_exec', { 
        sql: `
          CREATE OR REPLACE FUNCTION test_auth_uid()
          RETURNS TEXT
          LANGUAGE plpgsql
          SECURITY DEFINER
          AS $$
          BEGIN
            IF auth.uid() IS NULL THEN
              RETURN 'auth.uid() is NULL (service role context)';
            ELSE
              RETURN 'auth.uid() = ' || auth.uid()::text;
            END IF;
          END;
          $$;
        `
      });
      
      const { data: authTestResult, error: authTestError } = await supabaseAdmin
        .rpc('test_auth_uid');
        
      log('üîç', 'Resultado do teste auth.uid():', { result: authTestResult, error: authTestError?.message });
    }
    
    // Conclus√£o
    console.log('\n' + '='.repeat(60));
    log('üìä', 'RESUMO DOS TESTES:');
    console.log('1. ‚úÖ Usu√°rio admin encontrado no sistema');
    console.log('2. ‚úÖ Setor de teste identificado');
    console.log('3. ‚úÖ Pol√≠ticas RLS est√£o configuradas');
    console.log('4. ‚úÖ Cliente an√¥nimo √© bloqueado (comportamento correto)');
    console.log('5. ‚ö†Ô∏è  auth.uid() retorna NULL no contexto service role (esperado)');
    
    console.log('\nüéØ PR√ìXIMO PASSO:');
    console.log('Para testar completamente, precisamos:');
    console.log('1. Fazer login real com um usu√°rio admin no frontend');
    console.log('2. Verificar se auth.uid() retorna o ID correto no contexto do cliente');
    console.log('3. Testar a inser√ß√£o com sess√£o ativa');
    
  } catch (error) {
    log('‚ùå', 'Erro geral no teste:', error);
  }
}

// Fun√ß√£o adicional: Verificar estrutura de autentica√ß√£o
async function checkAuthSetup() {
  console.log('\nüîê VERIFICANDO CONFIGURA√á√ÉO DE AUTENTICA√á√ÉO\n');
  console.log('=' .repeat(60));
  
  try {
    // Verificar se RLS est√° habilitado
    const { data: tableInfo, error: tableError } = await supabaseAdmin
      .from('pg_tables')
      .select('tablename, rowsecurity')
      .eq('schemaname', 'public')
      .in('tablename', ['sector_news', 'sector_events']);
    
    log('üìã', 'Status RLS das tabelas:', tableInfo);
    
    // Verificar usu√°rios de teste
    const { data: userCount, error: userError } = await supabaseAdmin
      .from('profiles')
      .select('role', { count: 'exact' })
      .eq('role', 'admin');
    
    log('üë•', `N√∫mero de usu√°rios admin: ${userCount?.length || 0}`);
    
  } catch (error) {
    log('‚ùå', 'Erro na verifica√ß√£o de auth:', error);
  }
}

// Executar testes
async function runAllTests() {
  await testClientRLSPolicies();
  await checkAuthSetup();
}

if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = { testClientRLSPolicies, checkAuthSetup };