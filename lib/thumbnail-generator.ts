/**
 * Canvas API Thumbnail Generator
 * Gera thumbnails autom√°ticos de v√≠deos usando Canvas API
 */

export interface ThumbnailOptions {
  seekTime?: number; // Tempo em segundos para capturar (default: auto)
  timestamp?: number; // Alias para seekTime para compatibilidade
  maxWidth?: number;  // Largura m√°xima (default: 1280)
  maxHeight?: number; // Altura m√°xima (default: 720)
  width?: number;     // Largura espec√≠fica
  height?: number;    // Altura espec√≠fica
  quality?: number;   // Qualidade JPEG (default: 0.8)
}

export interface ThumbnailResult {
  blob: Blob;
  url: string;
  width: number;
  height: number;
  timestamp: number;
}

/**
 * Gera thumbnail do v√≠deo usando Canvas API
 */
export async function generateVideoThumbnail(
  videoFile: File,
  options: ThumbnailOptions = {}
): Promise<ThumbnailResult> {
  const {
    maxWidth = 1280,
    maxHeight = 720,
    quality = 0.8
  } = options;

  // Valida√ß√µes iniciais
  if (!videoFile) {
    throw new Error('Arquivo de v√≠deo √© obrigat√≥rio');
  }

  if (!videoFile.type.startsWith('video/')) {
    throw new Error('Arquivo deve ser um v√≠deo');
  }

  // Verificar suporte do navegador
  const support = checkThumbnailSupport();
  if (!support.supported) {
    throw new Error(`Navegador n√£o suporta gera√ß√£o de thumbnails: ${support.reasons.join(', ')}`);
  }

  console.log('üé¨ Iniciando gera√ß√£o de thumbnail para:', {
    nome: videoFile.name,
    tamanho: videoFile.size,
    tipo: videoFile.type,
    seekTime: options.seekTime
  });

  return new Promise((resolve, reject) => {
    const video = document.createElement('video');
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    if (!ctx) {
      reject(new Error('Canvas 2D context n√£o suportado'));
      return;
    }

    let isResolved = false;
    let videoUrl: string;

    // Timeout de seguran√ßa reduzido
    const timeout = setTimeout(() => {
      if (!isResolved) {
        isResolved = true;
        console.error('‚ùå Timeout ao gerar thumbnail ap√≥s 15 segundos');
        if (videoUrl) URL.revokeObjectURL(videoUrl);
        reject(new Error('Timeout ao gerar thumbnail (15s)'));
      }
    }, 15000);

    // Contador de tentativas para debugging
    let loadAttempts = 0;
    const maxLoadAttempts = 3;

    const attemptLoad = () => {
      loadAttempts++;
      console.log(`üîÑ Tentativa ${loadAttempts}/${maxLoadAttempts} de carregamento...`);
      
      video.load();
      
      // Timeout para esta tentativa espec√≠fica
      const attemptTimeout = setTimeout(() => {
        if (loadAttempts < maxLoadAttempts) {
          console.warn(`‚ö†Ô∏è Tentativa ${loadAttempts} timeout, tentando novamente...`);
          attemptLoad();
        }
      }, 5000);

      video.onloadedmetadata = () => {
        clearTimeout(attemptTimeout);
        console.log('üìä Metadata carregada na tentativa', loadAttempts, ':', {
          dura√ß√£o: video.duration,
          largura: video.videoWidth,
          altura: video.videoHeight,
          readyState: video.readyState,
          networkState: video.networkState
        });

        if (video.duration <= 0 || isNaN(video.duration)) {
          if (loadAttempts < maxLoadAttempts) {
            console.warn('‚ö†Ô∏è Dura√ß√£o inv√°lida, tentando recarregar...');
            attemptLoad();
            return;
          }
          
          clearTimeout(timeout);
          if (!isResolved) {
            isResolved = true;
            console.error('‚ùå Dura√ß√£o do v√≠deo permanece inv√°lida ap√≥s', maxLoadAttempts, 'tentativas');
            if (videoUrl) URL.revokeObjectURL(videoUrl);
            reject(new Error('V√≠deo n√£o possui dura√ß√£o v√°lida ap√≥s m√∫ltiplas tentativas'));
          }
          return;
        }

        // Calcular tempo de captura (3 segundos ou 20% do v√≠deo, o que for menor)
        const seekTime = options.seekTime ?? Math.min(3, video.duration * 0.2);
        const finalSeekTime = Math.max(0, Math.min(seekTime, video.duration - 0.1));
        
        console.log('‚è±Ô∏è Navegando para timestamp:', finalSeekTime);
        video.currentTime = finalSeekTime;
      };
    };

    video.onseeked = () => {
      try {
        console.log('üéØ Seek completo em:', video.currentTime + 's');

        // Calcular dimens√µes mantendo aspect ratio
        let { videoWidth: width, videoHeight: height } = video;
        
        if (width <= 0 || height <= 0) {
          throw new Error('Dimens√µes do v√≠deo inv√°lidas');
        }

        console.log('üìè Dimens√µes originais:', { width, height });
        
        if (width > maxWidth || height > maxHeight) {
          const ratio = Math.min(maxWidth / width, maxHeight / height);
          width = Math.floor(width * ratio);
          height = Math.floor(height * ratio);
          console.log('üìè Dimens√µes redimensionadas:', { width, height, ratio });
        }

        // Configurar canvas
        canvas.width = width;
        canvas.height = height;

        console.log('üé® Canvas configurado:', { width, height });

        // Desenhar frame do v√≠deo
        ctx.drawImage(video, 0, 0, width, height);
        console.log('üñºÔ∏è Frame desenhado no canvas');

        // Converter para blob
        canvas.toBlob((blob) => {
          clearTimeout(timeout);
          
          if (!isResolved && blob) {
            isResolved = true;
            console.log('‚úÖ Thumbnail gerado com sucesso:', {
              tamanho: blob.size,
              tipo: blob.type,
              timestamp: video.currentTime
            });
            
            if (videoUrl) URL.revokeObjectURL(videoUrl);
            
            const url = URL.createObjectURL(blob);
            resolve({
              blob,
              url,
              width,
              height,
              timestamp: video.currentTime
            });
          } else if (!isResolved) {
            isResolved = true;
            console.error('‚ùå Falha ao gerar blob da thumbnail');
            if (videoUrl) URL.revokeObjectURL(videoUrl);
            reject(new Error('Falha ao gerar thumbnail - blob nulo'));
          }
        }, 'image/jpeg', quality);

      } catch (error) {
        clearTimeout(timeout);
        if (!isResolved) {
          isResolved = true;
          console.error('‚ùå Erro ao processar thumbnail:', error);
          if (videoUrl) URL.revokeObjectURL(videoUrl);
          reject(error instanceof Error ? error : new Error('Erro ao processar thumbnail'));
        }
      }
    };

    video.onerror = (error) => {
      console.error('‚ùå Erro ao carregar v√≠deo na tentativa', loadAttempts, ':', error);
      
      if (loadAttempts < maxLoadAttempts) {
        console.warn('‚ö†Ô∏è Erro de carregamento, tentando novamente...');
        setTimeout(() => attemptLoad(), 1000);
        return;
      }
      
      clearTimeout(timeout);
      if (!isResolved) {
        isResolved = true;
        console.error('‚ùå Falha definitiva ao carregar v√≠deo ap√≥s', maxLoadAttempts, 'tentativas');
        if (videoUrl) URL.revokeObjectURL(videoUrl);
        reject(new Error(`Erro ao carregar v√≠deo para thumbnail (${maxLoadAttempts} tentativas)`));
      }
    };

    video.onabort = () => {
      console.warn('‚ö†Ô∏è Carregamento abortado na tentativa', loadAttempts);
      
      if (loadAttempts < maxLoadAttempts) {
        setTimeout(() => attemptLoad(), 1000);
        return;
      }
      
      clearTimeout(timeout);
      if (!isResolved) {
        isResolved = true;
        console.error('‚ùå Carregamento foi abortado ap√≥s', maxLoadAttempts, 'tentativas');
        if (videoUrl) URL.revokeObjectURL(videoUrl);
        reject(new Error('Carregamento do v√≠deo foi abortado'));
      }
    };

    video.onstalled = () => {
      console.warn('‚ö†Ô∏è Carregamento travado na tentativa', loadAttempts);
    };

    video.onloadstart = () => {
      console.log('üîÑ In√≠cio do carregamento na tentativa', loadAttempts);
    };

    video.onloadeddata = () => {
      console.log('üìä Dados carregados na tentativa', loadAttempts);
    };

    video.oncanplay = () => {
      console.log('‚ñ∂Ô∏è Pode reproduzir na tentativa', loadAttempts);
    };

    video.oncanplaythrough = () => {
      console.log('üèÅ Pode reproduzir completo na tentativa', loadAttempts);
    };

    // Configurar v√≠deo
    video.preload = 'metadata';
    video.muted = true;
    video.playsInline = true; // Importante para dispositivos m√≥veis
    video.controls = false; // Garantir que n√£o h√° controles visuais
    
    // N√£o usar crossOrigin para arquivos locais
    // video.crossOrigin = 'anonymous';
    
    videoUrl = URL.createObjectURL(videoFile);
    video.src = videoUrl;
    
    console.log('üîÑ Iniciando processo de carregamento do v√≠deo...', {
      fileName: videoFile.name,
      fileSize: videoFile.size,
      fileType: videoFile.type
    });
    
    // Iniciar primeiro carregamento
    attemptLoad();
  });
}

/**
 * Vers√£o alternativa simples de gera√ß√£o de thumbnail para casos problem√°ticos
 */
export async function generateVideoThumbnailSimple(
  videoSource: File | string,
  options: ThumbnailOptions = {}
): Promise<ThumbnailResult> {
  console.log('üîÑ Tentando gera√ß√£o simples de thumbnail...');
  
  return new Promise((resolve, reject) => {
    const video = document.createElement('video');
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    if (!ctx) {
      reject(new Error('Canvas n√£o suportado'));
      return;
    }

    let videoUrl: string;
    let resolved = false;

    const cleanup = () => {
      if (videoUrl) {
        URL.revokeObjectURL(videoUrl);
      }
    };

    const timeout = setTimeout(() => {
      if (!resolved) {
        resolved = true;
        cleanup();
        reject(new Error('Timeout na gera√ß√£o simples'));
      }
    }, 8000);

    video.addEventListener('loadedmetadata', () => {
      console.log('üìä Metadata simples carregada');
      
      // Usar timestamp/seekTime ou 0 como fallback
      const seekTime = options.seekTime ?? options.timestamp ?? 0;
      video.currentTime = seekTime;
    });

    video.addEventListener('seeked', () => {
      if (resolved) return;
      
      try {
        const { maxWidth = 640, maxHeight = 360, quality = 0.8 } = options;
        let { videoWidth: width, videoHeight: height } = video;
        
        if (width > maxWidth || height > maxHeight) {
          const ratio = Math.min(maxWidth / width, maxHeight / height);
          width = Math.floor(width * ratio);
          height = Math.floor(height * ratio);
        }

        canvas.width = width;
        canvas.height = height;
        ctx.drawImage(video, 0, 0, width, height);

        canvas.toBlob((blob) => {
          clearTimeout(timeout);
          if (!resolved && blob) {
            resolved = true;
            console.log('‚úÖ Thumbnail simples gerado');
            cleanup();
            resolve({
              blob,
              url: URL.createObjectURL(blob),
              width,
              height,
              timestamp: video.currentTime
            });
          } else if (!resolved) {
            resolved = true;
            cleanup();
            reject(new Error('Falha ao gerar blob simples'));
          }
        }, 'image/jpeg', quality);

      } catch (error) {
        if (!resolved) {
          resolved = true;
          cleanup();
          reject(error);
        }
      }
    });

    video.addEventListener('error', () => {
      if (!resolved) {
        resolved = true;
        cleanup();
        reject(new Error('Erro no carregamento simples'));
      }
    });

    // Configura√ß√£o mais simples
    video.muted = true;
    video.preload = 'metadata';
    video.controls = false;
    
    // Suportar tanto File quanto URL string
    if (typeof videoSource === 'string') {
      video.src = videoSource;
      videoUrl = '';  // N√£o precisamos revogar URL externa
    } else {
      videoUrl = URL.createObjectURL(videoSource);
      video.src = videoUrl;
    }
  });
}

/**
 * Gera m√∫ltiplos thumbnails em timestamps diferentes
 */
export async function generateMultipleThumbnails(
  videoFile: File,
  timestamps: number[],
  options: ThumbnailOptions = {}
): Promise<ThumbnailResult[]> {
  const results: ThumbnailResult[] = [];
  
  for (const timestamp of timestamps) {
    try {
      const result = await generateVideoThumbnail(videoFile, {
        ...options,
        seekTime: timestamp
      });
      results.push(result);
    } catch (error) {
      console.warn(`Falha ao gerar thumbnail para timestamp ${timestamp}:`, error);
      
      // Tentar vers√£o simples como fallback
      try {
        const simpleResult = await generateVideoThumbnailSimple(videoFile, {
          ...options,
          seekTime: timestamp
        });
        results.push(simpleResult);
        console.log(`‚úÖ Thumbnail simples gerado para timestamp ${timestamp}`);
      } catch (simpleError) {
        console.warn(`Falha tamb√©m na vers√£o simples para timestamp ${timestamp}:`, simpleError);
      }
    }
  }
  
  return results;
}

/**
 * Upload de thumbnail para Supabase Storage
 */
export async function uploadThumbnailToStorage(
  thumbnailBlob: Blob,
  videoFileName: string
): Promise<string> {
  const { uploadThumbnailWithFallback, ensureVideosBucket } = await import('./supabase-storage');
  
  // Ensure videos bucket exists
  await ensureVideosBucket();
  
  // Upload with fallback strategy
  return await uploadThumbnailWithFallback(thumbnailBlob, videoFileName);
}

/**
 * Verifica se o browser suporta Canvas API para thumbnails
 */
export function checkThumbnailSupport(): {
  supported: boolean;
  reasons: string[];
} {
  const reasons: string[] = [];
  
  console.log('üîç Verificando suporte do navegador para gera√ß√£o de thumbnails...');
  
  // Verificar Canvas 2D
  try {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (!ctx) {
      reasons.push('Canvas 2D context n√£o dispon√≠vel');
    } else {
      // Testar se o canvas pode desenhar
      try {
        ctx.fillStyle = 'red';
        ctx.fillRect(0, 0, 10, 10);
        console.log('‚úÖ Canvas 2D funcional');
      } catch (error) {
        reasons.push('Canvas 2D n√£o funcional');
      }
    }
  } catch (error) {
    reasons.push('Canvas API n√£o suportada');
  }
  
  // Verificar suporte a v√≠deo
  try {
    const video = document.createElement('video');
    if (!video.canPlayType) {
      reasons.push('Elemento video n√£o suportado');
    } else {
      // Testar formatos de v√≠deo suportados
      const mp4Support = video.canPlayType('video/mp4');
      const webmSupport = video.canPlayType('video/webm');
      const movSupport = video.canPlayType('video/quicktime');
      
      console.log('üé• Suporte a formatos de v√≠deo:', {
        mp4: mp4Support,
        webm: webmSupport,
        mov: movSupport
      });
      
      if (!mp4Support && !webmSupport && !movSupport) {
        reasons.push('Nenhum formato de v√≠deo suportado');
      }
    }
  } catch (error) {
    reasons.push('Elemento video n√£o dispon√≠vel');
  }
  
  // Verificar Blob e URL
  if (typeof Blob === 'undefined') {
    reasons.push('Blob API n√£o suportada');
  } else {
    console.log('‚úÖ Blob API dispon√≠vel');
  }
  
  if (typeof URL.createObjectURL === 'undefined') {
    reasons.push('URL.createObjectURL n√£o suportado');
  } else {
    console.log('‚úÖ URL.createObjectURL dispon√≠vel');
  }
  
  // Verificar se estamos em um contexto seguro (HTTPS ou localhost)
  const isSecureContext = window.isSecureContext || location.protocol === 'https:' || location.hostname === 'localhost';
  if (!isSecureContext) {
    console.warn('‚ö†Ô∏è Contexto n√£o seguro - algumas funcionalidades podem n√£o funcionar');
  }
  
  // Verificar User Agent para dispositivos m√≥veis conhecidos por problemas
  const userAgent = navigator.userAgent.toLowerCase();
  const isMobile = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent);
  const isIOS = /ipad|iphone|ipod/.test(userAgent);
  
  console.log('üì± Informa√ß√µes do dispositivo:', {
    isMobile,
    isIOS,
    userAgent: userAgent.substring(0, 100) + '...'
  });
  
  if (isIOS) {
    console.warn('‚ö†Ô∏è iOS detectado - pode ter limita√ß√µes com gera√ß√£o de thumbnails');
  }
  
  const result = {
    supported: reasons.length === 0,
    reasons
  };
  
  console.log(result.supported ? '‚úÖ Navegador suporta gera√ß√£o de thumbnails' : '‚ùå Navegador N√ÉO suporta gera√ß√£o de thumbnails:', result.reasons);
  
  return result;
}

/**
 * Cleanup de URLs de objeto criadas
 */
export function cleanupObjectUrls(urls: string[]): void {
  urls.forEach(url => {
    try {
      URL.revokeObjectURL(url);
    } catch (error) {
      console.warn('Erro ao limpar URL de objeto:', error);
    }
  });
}