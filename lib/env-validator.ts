/**
 * Environment Variables Validator
 * Valida todas as vari√°veis de ambiente necess√°rias para produ√ß√£o
 */

interface EnvConfig {
  name: string;
  required: boolean;
  type: 'string' | 'url' | 'boolean' | 'number';
  description: string;
  validation?: (value: string) => boolean;
  defaultValue?: string;
}

const ENV_SCHEMA: EnvConfig[] = [
  // Next.js - Supabase (OBRIGAT√ìRIAS)
  {
    name: 'NEXT_PUBLIC_SUPABASE_URL',
    required: true,
    type: 'url',
    description: 'URL p√∫blico do projeto Supabase',
    validation: (value) => value.includes('.supabase.co') && value.startsWith('https://')
  },
  {
    name: 'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    required: true,
    type: 'string',
    description: 'Chave an√¥nima p√∫blica do Supabase',
    validation: (value) => value.startsWith('eyJ') && value.length > 100 // JWT token
  },
  {
    name: 'SUPABASE_SERVICE_ROLE_KEY',
    required: true,
    type: 'string',
    description: 'Chave de servi√ßo para opera√ß√µes admin (MANTENHA SEGURA!)',
    validation: (value) => value.startsWith('eyJ') && value.length > 100 // JWT token
  },

  // MCP Servers (OPCIONAIS mas recomendadas)
  {
    name: 'GITHUB_TOKEN',
    required: false,
    type: 'string',
    description: 'Token do GitHub para integra√ß√£o com MCP servers',
    validation: (value) => value.startsWith('ghp_') && value.length === 40
  },
  {
    name: 'GITHUB_PERSONAL_ACCESS_TOKEN',
    required: false,
    type: 'string',
    description: 'Token pessoal do GitHub (mesmo que GITHUB_TOKEN)',
    validation: (value) => value.startsWith('ghp_') && value.length === 40
  },
  {
    name: 'FIGMA_API_KEY',
    required: false,
    type: 'string',
    description: 'Chave da API do Figma para integra√ß√£o com design',
    validation: (value) => value.startsWith('figd_') && value.length > 20
  },
  {
    name: 'SUPABASE_ACCESS_TOKEN',
    required: false,
    type: 'string',
    description: 'Token de acesso do Supabase para MCP servers',
    validation: (value) => value.startsWith('sbp_') && value.length > 20
  },
  {
    name: 'SUPABASE_ACCESS_TOKEN_CRESOL',
    required: false,
    type: 'string',
    description: 'Token de acesso espec√≠fico do Cresol (mesmo que SUPABASE_ACCESS_TOKEN)',
    validation: (value) => value.startsWith('sbp_') && value.length > 20
  },
  {
    name: 'SUPABASE_PROJECT_REF',
    required: false,
    type: 'string',
    description: 'Refer√™ncia do projeto Supabase',
    validation: (value) => value.length > 10 && !value.includes('your-project')
  },
  {
    name: 'CONTEXT7_API_KEY',
    required: false,
    type: 'string',
    description: 'Chave da API Context7 para documenta√ß√£o AI'
  },

  // Sistema
  {
    name: 'NODE_ENV',
    required: false,
    type: 'string',
    description: 'Ambiente de execu√ß√£o',
    validation: (value) => ['development', 'production', 'test'].includes(value),
    defaultValue: 'development'
  },
  {
    name: 'MCP_FILESYSTEM_ALLOWED_DIRS',
    required: false,
    type: 'string',
    description: 'Diret√≥rios permitidos para MCP filesystem'
  }
];

interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  missing: string[];
  invalid: string[];
  suggestions: string[];
}

/**
 * Valida todas as vari√°veis de ambiente
 */
export function validateEnvironment(): ValidationResult {
  const result: ValidationResult = {
    isValid: true,
    errors: [],
    warnings: [],
    missing: [],
    invalid: [],
    suggestions: []
  };

  // Verificar se estamos no servidor (para acessar process.env completo)
  const isServer = typeof window === 'undefined';
  
  for (const config of ENV_SCHEMA) {
    const value = isServer 
      ? process.env[config.name]
      : config.name.startsWith('NEXT_PUBLIC_') 
        ? process.env[config.name] 
        : undefined;

    // Verificar se vari√°vel obrigat√≥ria est√° presente
    if (config.required && (!value || value.trim() === '')) {
      result.errors.push(`‚ùå OBRIGAT√ìRIA: ${config.name} - ${config.description}`);
      result.missing.push(config.name);
      result.isValid = false;
      continue;
    }

    // Se vari√°vel n√£o est√° presente e n√£o √© obrigat√≥ria
    if (!value || value.trim() === '') {
      if (!config.required) {
        result.warnings.push(`‚ö†Ô∏è  OPCIONAL: ${config.name} n√£o configurada - ${config.description}`);
        
        // Sugerir configura√ß√£o se for importante
        if (config.name.includes('GITHUB') || config.name.includes('FIGMA')) {
          result.suggestions.push(`üí° Considere configurar ${config.name} para funcionalidades completas`);
        }
      }
      continue;
    }

    // Verificar se √© placeholder
    if (value.includes('your-') || value.includes('your_') || value === config.name.toLowerCase()) {
      result.warnings.push(`‚ö†Ô∏è  PLACEHOLDER: ${config.name} cont√©m valor placeholder`);
      result.suggestions.push(`üîÑ Substitua ${config.name} por um valor real`);
      continue;
    }

    // Validar formato se especificado
    if (config.validation && !config.validation(value)) {
      result.errors.push(`‚ùå FORMATO INV√ÅLIDO: ${config.name} - ${config.description}`);
      result.invalid.push(config.name);
      result.isValid = false;
      continue;
    }

    // Valida√ß√µes espec√≠ficas por tipo
    switch (config.type) {
      case 'url':
        try {
          new URL(value);
        } catch {
          result.errors.push(`‚ùå URL INV√ÅLIDA: ${config.name} deve ser uma URL v√°lida`);
          result.invalid.push(config.name);
          result.isValid = false;
        }
        break;

      case 'boolean':
        if (!['true', 'false', '1', '0'].includes(value.toLowerCase())) {
          result.errors.push(`‚ùå BOOLEAN INV√ÅLIDO: ${config.name} deve ser true/false ou 1/0`);
          result.invalid.push(config.name);
          result.isValid = false;
        }
        break;

      case 'number':
        if (isNaN(Number(value))) {
          result.errors.push(`‚ùå N√öMERO INV√ÅLIDO: ${config.name} deve ser um n√∫mero`);
          result.invalid.push(config.name);
          result.isValid = false;
        }
        break;
    }
  }

  // Verificar tokens de seguran√ßa comprometidos
  const compromisedTokens = [
    'ghp_[REDACTED]',
    'figd_[REDACTED]',
    'sbp_[REDACTED]'
  ];

  const env = isServer ? process.env : {};
  
  for (const [key, value] of Object.entries(env)) {
    if (typeof value === 'string' && compromisedTokens.some(token => value.includes(token))) {
      result.errors.push(`üö® SEGURAN√áA CR√çTICA: ${key} cont√©m token comprometido - DEVE ser rotacionado!`);
      result.invalid.push(key);
      result.isValid = false;
    }
  }

  return result;
}

/**
 * Gera relat√≥rio formatado de valida√ß√£o
 */
export function generateValidationReport(result: ValidationResult): string {
  const lines: string[] = [];
  
  lines.push('üîç RELAT√ìRIO DE VALIDA√á√ÉO DE VARI√ÅVEIS DE AMBIENTE');
  lines.push('='.repeat(50));
  lines.push('');

  // Status geral
  if (result.isValid) {
    lines.push('‚úÖ STATUS: TODAS AS VALIDA√á√ïES PASSARAM');
  } else {
    lines.push('‚ùå STATUS: PROBLEMAS ENCONTRADOS - CORRIJA ANTES DO DEPLOY');
  }
  lines.push('');

  // Erros cr√≠ticos
  if (result.errors.length > 0) {
    lines.push('üö® ERROS CR√çTICOS (DEVEM SER CORRIGIDOS):');
    result.errors.forEach(error => lines.push(`  ${error}`));
    lines.push('');
  }

  // Avisos
  if (result.warnings.length > 0) {
    lines.push('‚ö†Ô∏è  AVISOS (RECOMENDADO CORRIGIR):');
    result.warnings.forEach(warning => lines.push(`  ${warning}`));
    lines.push('');
  }

  // Sugest√µes
  if (result.suggestions.length > 0) {
    lines.push('üí° SUGEST√ïES:');
    result.suggestions.forEach(suggestion => lines.push(`  ${suggestion}`));
    lines.push('');
  }

  // Resumo
  lines.push('üìä RESUMO:');
  lines.push(`  ‚Ä¢ Obrigat√≥rias faltando: ${result.missing.length}`);
  lines.push(`  ‚Ä¢ Formatos inv√°lidos: ${result.invalid.length}`);
  lines.push(`  ‚Ä¢ Avisos: ${result.warnings.length}`);
  lines.push(`  ‚Ä¢ Sugest√µes: ${result.suggestions.length}`);
  
  return lines.join('\n');
}

/**
 * Hook para usar valida√ß√£o em componentes React
 */
export function useEnvironmentValidation() {
  if (typeof window !== 'undefined') {
    console.warn('Environment validation should only run on the server side');
    return { isValid: true, errors: [], warnings: [], missing: [], invalid: [], suggestions: [] };
  }
  
  return validateEnvironment();
}

/**
 * Middleware para validar ambiente na inicializa√ß√£o
 */
export function validateEnvironmentOnStartup(): void {
  if (typeof window !== 'undefined') return; // S√≥ no servidor
  
  const result = validateEnvironment();
  
  if (!result.isValid) {
    console.error('\n' + generateValidationReport(result));
    
    if (process.env.NODE_ENV === 'production') {
      console.error('\nüö´ ABORTING: Cannot start in production with invalid environment');
      process.exit(1);
    } else {
      console.warn('\n‚ö†Ô∏è  WARNING: Development server starting with environment issues');
    }
  } else {
    console.log('\n‚úÖ Environment validation passed - All required variables configured');
  }
}